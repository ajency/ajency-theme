// Generated by CoffeeScript 1.7.1
"use strict";
var AjencyWpThemeGenerator, chalk, path, util, yeoman, yosay;

util = require("util");

path = require("path");

yeoman = require("yeoman-generator");

yosay = require("yosay");

chalk = require("chalk");

AjencyWpThemeGenerator = yeoman.generators.Base.extend({
  init: function() {
    var afterNPMInstallComplete, afterThemeBowerInstallComplete;
    this.pkg = require("../package.json");
    afterNPMInstallComplete = (function(_this) {
      return function() {
        process.chdir("../js/");
        console.log("Installing theme bower components");
        return _this.installDependencies({
          skipInstall: _this.options["skip-install"],
          npm: false,
          callback: afterThemeBowerInstallComplete
        });
      };
    })(this);
    afterThemeBowerInstallComplete = (function(_this) {
      return function() {
        process.chdir("../SPA/");
        console.log("Installing SPA bower components");
        return _this.installDependencies({
          skipInstall: _this.options["skip-install"],
          npm: false
        });
      };
    })(this);
    return this.on("end", function() {
      if (this.themeNameSpace) {
        process.chdir(this.themeNameSpace + "/grunt/");
        console.log("Installing grunt modules");
        return this.installDependencies({
          skipInstall: this.options["skip-install"],
          bower: false,
          callback: afterNPMInstallComplete
        });
      }
    });
  },
  askFor: function() {
    var cb, prompts;
    cb = this.async();
    console.log("Ajency.in Logo/Name comming soon :P");
    prompts = [
      {
        name: "themeName",
        message: "Name of the theme you want to create?"
      }, {
        name: "themeNameSpace",
        message: "Uniq name-space for the theme (foldername)?",
        "default": function(answers) {
          return answers.themeName.replace(/\W/g, "").toLowerCase();
        }
      }, {
        name: "themeAuthor",
        message: "Name of the themes author?",
        "default": "Team Ajency"
      }, {
        name: "themeAuthorURI",
        message: "Website of the themes authors?",
        "default": "http://ajency.in/team"
      }, {
        name: "themeURI",
        message: "Website of the theme?",
        "default": "http://ajency.in/"
      }, {
        type: "checkbox",
        name: "themeTags",
        message: "Theme tags ( more available on wordpress.org )?",
        choices: ["dark", "light"]
      }, {
        name: "themeDescription",
        message: "Description of the theme?",
        "default": function(answers) {
          return "This is a description for the " + answers.themeName + " theme.";
        }
      }, {
        name: "githubRepo",
        message: "Github repository path( http://github.com/ajency/impruw )",
        "default": function(answers) {
          return "http://github.com/ajency/" + answers.themeNameSpace;
        }
      }
    ];
    return this.prompt(prompts, (function(props) {
      this.themeName = props.themeName;
      this.themeNameSpace = props.themeNameSpace;
      this.themeAuthor = props.themeAuthor;
      this.themeAuthorURI = props.themeAuthorURI;
      this.themeURI = props.themeURI;
      this.themeTags = props.themeTags;
      this.themeTags = props.themeTags;
      this.githubRepo = props.githubRepo;
      this.jshintTag = "<%= jshint.all %>";
      return cb();
    }).bind(this));
  },
  app: function() {
    var currentDate;
    currentDate = new Date();
    this.themeCreated = currentDate.getFullYear() + "-" + (currentDate.getMonth() + 1) + "-" + currentDate.getDate();
    this.directory("theme", this.themeNameSpace);
    this.mkdir(this.themeNameSpace + "/production");
    this.mkdir(this.themeNameSpace + "/css/fonts");
    this.mkdir(this.themeNameSpace + "/js/modules");
    this.mkdir(this.themeNameSpace + "/js/tests/specs");
    this.mkdir(this.themeNameSpace + "/js/tests/helpers");
    this.mkdir(this.themeNameSpace + "/grunt");
    this.mkdir(this.themeNameSpace + "/SPA/tests/specs");
    this.mkdir(this.themeNameSpace + "/SPA/tests/helpers");
    this.mkdir(this.themeNameSpace + "/SPA/apps");
    this.mkdir(this.themeNameSpace + "/SPA/behaviors");
    this.mkdir(this.themeNameSpace + "/SPA/pages");
    this.mkdir(this.themeNameSpace + "/SPA/entities");
    this.mkdir(this.themeNameSpace + "/classes");
    this.mkdir(this.themeNameSpace + "/tests");
    this.template("_Gruntfile.tpl", this.themeNameSpace + "/grunt/Gruntfile.coffee");
    this.template("_package.json", this.themeNameSpace + "/grunt/package.json");
    this.template("_coffeelint.json", this.themeNameSpace + "/grunt/coffeelint.json");
    this.template("_jshintignore", this.themeNameSpace + "/grunt/.jshintignore");
    this.template("_jshintrc", this.themeNameSpace + "/grunt/.jshintrc");
    this.template("composer.tpl", this.themeNameSpace + "/composer.json");
    this.template("_bower.json", this.themeNameSpace + "/js/bower.json");
    return this.template("_spa-bower.json", this.themeNameSpace + "/SPA/bower.json");
  }
});

module.exports = AjencyWpThemeGenerator;
